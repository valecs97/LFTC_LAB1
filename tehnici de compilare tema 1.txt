Language Specification:
 1 .Language Definition:
  1.1 Alphabet:
  1.1.a. Upper (A-Z) and lower case letters (a-z) of the English alphabet
      b. Underline character '_';
      c. Decimal digits (0-9);
  Lexic:
      a.Special symbols, representing:
		- operators + - * / := < <= = >=
		- separators [ ] { }  : ; space
		- reserved words:
	    array  char  const do else  if int  of program read then var while write
		
      b.identifiers
	   -a sequence of letters and  digits, such that the first charater is a letter; the rule is:
	     identifier = letter {( letter | digit | zero)}
	     letter = "A" | "B" | . ..| "Z"
	     digit = "1" |...| "9"
		 zero = "0"
		 
      c.constants
		1.integer - rule:
			noconst = +no | -no | zero
			no = zero | nonzero
			nonzero = digit { (digit | zero) }
		2.boolean - rule:
			booleanconst = "TRUE" | "FALSE"
		3.day
			constday = "<day>"
			day = "LUNI" | "MARTI" | "MIERCURI" | "JOI" | "VINERI" | "SAMBATA" | "DUMINICA"

2.Syntax
	The words - predefined tokens are specified between " and ":
	a) Sintactical rules:
	
		program = "START" stmtlist "END"
		
		stmtlist = {stmt ";"}
		stmt = simplstmt | structstmt
		simplstmt = assignstmt | iostmt | decllist
		structstmt = ifstmt | whilestmt

		assignstmt = IDENTIFIER "=" op
		op = IDENTIFIER | noconst | constday | booleanconst
		opmath = IDENTIFIER | noconst
		
		iostmt = "READ" IDENTIFIER | "WRITE" op

		decllist = "VAR" declaration {"," declaration}
		declaration = IDENTIFIER type
		type = "BOOLEAN" | "INTEGER" | "DAY"

		ifstmt = "IF"  condition "THEN" stmt ["ELSE" stmt] "END-IF"
		whilestmt = "WHILE" condition "DO" stmt "END-WHILE"

		comp = "and" | "or"
		math = "+" | "-" | "*" | "/"
		
		expression = ["not"] term { comp ["not"] term }
		term = "(" expression ")" | op | "[" opmath {math opmath} "]"
		condition = expression ( RELATION | LOGIC ) expression


b) lexical rules:
	RELATION = "<" | "<=" | "==" | "<>" | ">=" | ">"
	LOGIC = "and | "or"

The tokens are codified according to the following table:
	- identifiers- code 0
	- constants- code 1
	- reserved words: each word has its own code
	- operators: each operator has its own code
	- separators: each separator has its own code
	
Codificator:

Token type   	Code
identifier   	0
constant		1
const			2
program			2
array			3
var				4
integer			5
boolean			6
start			7
end				8
read			9
write			10
while			11
char			12
do				13
if				14
then			15
else			16
and				17
or				18
not				19
;				20
,				21
+				22
-				23
*				24
\				25
(				26
)				27
[				28
]				29
<				30
>				31
>=				32
<=				33
==				34
=				35
{				36
}				37
<>				38
luni			39
marti			40
miercuri		41
joi				42
vineri			43
sambata			44
duminica		45